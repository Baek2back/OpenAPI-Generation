/* tslint:disable */
/* eslint-disable */
/**
 * Posts API Swagger
 * The Posts API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePostDto } from '../models';
// @ts-ignore
import { Post } from '../models';
// @ts-ignore
import { UpdatePostDto } from '../models';
/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 게시글을 생성한다
         * @summary 게시글 생성
         * @param {CreatePostDto} createPostDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createPostDto: CreatePostDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPostDto' is not null or undefined
            assertParamExists('create', 'createPostDto', createPostDto)
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPostDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 모든 게시글을 조회한다
         * @summary 모든 게시글 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 게시글을 조회한다
         * @summary 특정 게시글 조회
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findOne', 'id', id)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 게시글을 삭제한다
         * @summary 게시글 삭제
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('remove', 'id', id)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 특정 게시글을 갱신한다
         * @summary 특정 게시글 갱신
         * @param {string} id 
         * @param {UpdatePostDto} updatePostDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, updatePostDto: UpdatePostDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'updatePostDto' is not null or undefined
            assertParamExists('update', 'updatePostDto', updatePostDto)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePostDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostsApiAxiosParamCreator(configuration)
    return {
        /**
         * 게시글을 생성한다
         * @summary 게시글 생성
         * @param {CreatePostDto} createPostDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createPostDto: CreatePostDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createPostDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 모든 게시글을 조회한다
         * @summary 모든 게시글 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 특정 게시글을 조회한다
         * @summary 특정 게시글 조회
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 특정 게시글을 삭제한다
         * @summary 게시글 삭제
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 특정 게시글을 갱신한다
         * @summary 특정 게시글 갱신
         * @param {string} id 
         * @param {UpdatePostDto} updatePostDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, updatePostDto: UpdatePostDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, updatePostDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostsApiFp(configuration)
    return {
        /**
         * 게시글을 생성한다
         * @summary 게시글 생성
         * @param {CreatePostDto} createPostDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createPostDto: CreatePostDto, options?: any): AxiosPromise<Post> {
            return localVarFp.create(createPostDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 모든 게시글을 조회한다
         * @summary 모든 게시글 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(options?: any): AxiosPromise<Array<Post>> {
            return localVarFp.findAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 게시글을 조회한다
         * @summary 특정 게시글 조회
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne(id: string, options?: any): AxiosPromise<Post> {
            return localVarFp.findOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 게시글을 삭제한다
         * @summary 게시글 삭제
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(id: string, options?: any): AxiosPromise<Post> {
            return localVarFp.remove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 특정 게시글을 갱신한다
         * @summary 특정 게시글 갱신
         * @param {string} id 
         * @param {UpdatePostDto} updatePostDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: string, updatePostDto: UpdatePostDto, options?: any): AxiosPromise<Post> {
            return localVarFp.update(id, updatePostDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in PostsApi.
 * @export
 * @interface PostsApiCreateRequest
 */
export interface PostsApiCreateRequest {
    /**
     * 
     * @type {CreatePostDto}
     * @memberof PostsApiCreate
     */
    readonly createPostDto: CreatePostDto
}

/**
 * Request parameters for findOne operation in PostsApi.
 * @export
 * @interface PostsApiFindOneRequest
 */
export interface PostsApiFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof PostsApiFindOne
     */
    readonly id: string
}

/**
 * Request parameters for remove operation in PostsApi.
 * @export
 * @interface PostsApiRemoveRequest
 */
export interface PostsApiRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof PostsApiRemove
     */
    readonly id: string
}

/**
 * Request parameters for update operation in PostsApi.
 * @export
 * @interface PostsApiUpdateRequest
 */
export interface PostsApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PostsApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdatePostDto}
     * @memberof PostsApiUpdate
     */
    readonly updatePostDto: UpdatePostDto
}

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
    /**
     * 게시글을 생성한다
     * @summary 게시글 생성
     * @param {PostsApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public create(requestParameters: PostsApiCreateRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).create(requestParameters.createPostDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 모든 게시글을 조회한다
     * @summary 모든 게시글 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public findAll(options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 게시글을 조회한다
     * @summary 특정 게시글 조회
     * @param {PostsApiFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public findOne(requestParameters: PostsApiFindOneRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).findOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 게시글을 삭제한다
     * @summary 게시글 삭제
     * @param {PostsApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public remove(requestParameters: PostsApiRemoveRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).remove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 특정 게시글을 갱신한다
     * @summary 특정 게시글 갱신
     * @param {PostsApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public update(requestParameters: PostsApiUpdateRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).update(requestParameters.id, requestParameters.updatePostDto, options).then((request) => request(this.axios, this.basePath));
    }
}
